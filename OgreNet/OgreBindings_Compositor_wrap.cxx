/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OgreBindings_Compositor(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OgreBindings_Compositor(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OgreBindings_Compositor(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}

/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "Ogre.h"
#include "OgrePrerequisites.h"
#include "OgreIteratorWrappers.h"
#include "OgreString.h"

using namespace Ogre;


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include "OgreCompositionPass.h"

SWIGINTERN std::vector<Ogre::CompositionPass * > *new_std_vector_Sl_Ogre_CompositionPass_Sm__Sg___SWIG_1(int capacity){
        std::vector<Ogre::CompositionPass* >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<Ogre::CompositionPass* >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Ogre::CompositionPass *std_vector_Sl_Ogre_CompositionPass_Sm__Sg__getitemcopy(std::vector<Ogre::CompositionPass * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector<Ogre::CompositionPass * >::const_reference std_vector_Sl_Ogre_CompositionPass_Sm__Sg__getitem(std::vector<Ogre::CompositionPass * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__setitem(std::vector<Ogre::CompositionPass * > *self,int index,std::vector<Ogre::CompositionPass * >::value_type const &value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = value;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__AddRange(std::vector<Ogre::CompositionPass * > *self,std::vector<Ogre::CompositionPass * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector<Ogre::CompositionPass * > *std_vector_Sl_Ogre_CompositionPass_Sm__Sg__GetRange(std::vector<Ogre::CompositionPass * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<Ogre::CompositionPass* >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Insert(std::vector<Ogre::CompositionPass * > *self,int index,std::vector<Ogre::CompositionPass * >::value_type const &value){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__InsertRange(std::vector<Ogre::CompositionPass * > *self,int index,std::vector<Ogre::CompositionPass * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__RemoveAt(std::vector<Ogre::CompositionPass * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__RemoveRange(std::vector<Ogre::CompositionPass * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector<Ogre::CompositionPass * > *std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Repeat(std::vector<Ogre::CompositionPass * >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<Ogre::CompositionPass* >(count, value);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Reverse__SWIG_0(std::vector<Ogre::CompositionPass * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Reverse__SWIG_1(std::vector<Ogre::CompositionPass * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionPass_Sm__Sg__SetRange(std::vector<Ogre::CompositionPass * > *self,int index,std::vector<Ogre::CompositionPass * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN Ogre::CompositionPass *Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Sg__peekNext(Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *self){ return self->peekNext(); }
SWIGINTERN Ogre::CompositionPass *Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Sg__getNext(Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *self){ return self->getNext(); }

#include "OgreCompositionTargetPass.h"

SWIGINTERN void Ogre_CompositionTargetPass_SetOutputName(Ogre::CompositionTargetPass *self,Ogre::String const &strOutPutName){
        self->setOutputName(strOutPutName);
    }
SWIGINTERN std::vector<Ogre::CompositionTargetPass * > *new_std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg___SWIG_1(int capacity){
        std::vector<Ogre::CompositionTargetPass* >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<Ogre::CompositionTargetPass* >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Ogre::CompositionTargetPass *std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__getitemcopy(std::vector<Ogre::CompositionTargetPass * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector<Ogre::CompositionTargetPass * >::const_reference std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__getitem(std::vector<Ogre::CompositionTargetPass * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__setitem(std::vector<Ogre::CompositionTargetPass * > *self,int index,std::vector<Ogre::CompositionTargetPass * >::value_type const &value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = value;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__AddRange(std::vector<Ogre::CompositionTargetPass * > *self,std::vector<Ogre::CompositionTargetPass * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector<Ogre::CompositionTargetPass * > *std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__GetRange(std::vector<Ogre::CompositionTargetPass * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<Ogre::CompositionTargetPass* >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Insert(std::vector<Ogre::CompositionTargetPass * > *self,int index,std::vector<Ogre::CompositionTargetPass * >::value_type const &value){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__InsertRange(std::vector<Ogre::CompositionTargetPass * > *self,int index,std::vector<Ogre::CompositionTargetPass * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__RemoveAt(std::vector<Ogre::CompositionTargetPass * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__RemoveRange(std::vector<Ogre::CompositionTargetPass * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector<Ogre::CompositionTargetPass * > *std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Repeat(std::vector<Ogre::CompositionTargetPass * >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<Ogre::CompositionTargetPass* >(count, value);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Reverse__SWIG_0(std::vector<Ogre::CompositionTargetPass * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Reverse__SWIG_1(std::vector<Ogre::CompositionTargetPass * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__SetRange(std::vector<Ogre::CompositionTargetPass * > *self,int index,std::vector<Ogre::CompositionTargetPass * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN Ogre::CompositionTargetPass *Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Sg__peekNext(Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *self){ return self->peekNext(); }
SWIGINTERN Ogre::CompositionTargetPass *Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Sg__getNext(Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *self){ return self->getNext(); }

#include "OgreCompositionTechnique.h"
#include "CompositionTechniqueExt.h"

SWIGINTERN Ogre::CTTextureDefinition *Ogre_CompositionTechnique_CreateTextureDefinition(Ogre::CompositionTechnique *self,Ogre::String const &name){
        return new CTTextureDefinition(self->createTextureDefinition(name));
    }
SWIGINTERN Ogre::CTTextureDefinition *Ogre_CompositionTechnique_GetTextureDefinition(Ogre::CompositionTechnique *self,size_t idx){
        return new CTTextureDefinition(self->getTextureDefinition(idx));
    }
SWIGINTERN Ogre::CTTextureDefinitionsIterator *Ogre_CompositionTechnique_GetTextureDefinitionIterator(Ogre::CompositionTechnique *self){
        Ogre::CompositionTechnique::TextureDefinitionIterator * jresult;

        //typedef std::vector<TextureDefinition*> TextureDefinitions;
        //typedef VectorIterator<TextureDefinitions> TextureDefinitionIterator;
        
        SwigValueWrapper<Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique::TextureDefinition * > > > result;

        result = self->getTextureDefinitionIterator();
        jresult = new Ogre::CompositionTechnique::TextureDefinitionIterator((Ogre::CompositionTechnique::TextureDefinitionIterator &)result); 

        return new Ogre::CTTextureDefinitionsIterator(jresult);
    }
SWIGINTERN std::vector<Ogre::CompositionTechnique * > *new_std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg___SWIG_1(int capacity){
        std::vector<Ogre::CompositionTechnique* >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<Ogre::CompositionTechnique* >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Ogre::CompositionTechnique *std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__getitemcopy(std::vector<Ogre::CompositionTechnique * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector<Ogre::CompositionTechnique * >::const_reference std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__getitem(std::vector<Ogre::CompositionTechnique * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__setitem(std::vector<Ogre::CompositionTechnique * > *self,int index,std::vector<Ogre::CompositionTechnique * >::value_type const &value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = value;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__AddRange(std::vector<Ogre::CompositionTechnique * > *self,std::vector<Ogre::CompositionTechnique * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector<Ogre::CompositionTechnique * > *std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__GetRange(std::vector<Ogre::CompositionTechnique * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<Ogre::CompositionTechnique* >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Insert(std::vector<Ogre::CompositionTechnique * > *self,int index,std::vector<Ogre::CompositionTechnique * >::value_type const &value){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__InsertRange(std::vector<Ogre::CompositionTechnique * > *self,int index,std::vector<Ogre::CompositionTechnique * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__RemoveAt(std::vector<Ogre::CompositionTechnique * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__RemoveRange(std::vector<Ogre::CompositionTechnique * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector<Ogre::CompositionTechnique * > *std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Repeat(std::vector<Ogre::CompositionTechnique * >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<Ogre::CompositionTechnique* >(count, value);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Reverse__SWIG_0(std::vector<Ogre::CompositionTechnique * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Reverse__SWIG_1(std::vector<Ogre::CompositionTechnique * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__SetRange(std::vector<Ogre::CompositionTechnique * > *self,int index,std::vector<Ogre::CompositionTechnique * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN Ogre::CompositionTechnique *Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Sg__peekNext(Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *self){ return self->peekNext(); }
SWIGINTERN Ogre::CompositionTechnique *Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Sg__getNext(Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *self){ return self->getNext(); }

#include "OgreCompositor.h"

SWIGINTERN Ogre::Resource *Ogre_Compositor_GetAsResource(Ogre::Compositor *self){
        return (Ogre::Resource*)self;
    }
SWIGINTERN Ogre::Compositor *Ogre_CompositorPtr_Get(Ogre::CompositorPtr *self){
        return (Ogre::Compositor*)self->get();
    }
SWIGINTERN bool Ogre_CompositorPtr_IsUnique(Ogre::CompositorPtr *self){
        return self->unique();
    }
SWIGINTERN unsigned int Ogre_CompositorPtr_UseCount(Ogre::CompositorPtr *self){
        return self->useCount();
    }
SWIGINTERN bool Ogre_CompositorPtr_IsNull(Ogre::CompositorPtr *self){
        return self->isNull();
    }
SWIGINTERN void Ogre_CompositorPtr_SetNull(Ogre::CompositorPtr *self){
        return self->setNull();
    }

#include "OgreCompositorInstance.h"
#include "CompositorInstanceExt.h"

SWIGINTERN void Ogre_CompositorInstance_AddListener(Ogre::CompositorInstance *self,Ogre::CompositorInstanceListenerDirector *l){
        self->addListener((Ogre::CompositorInstance::Listener *)l);
    }
SWIGINTERN void Ogre_CompositorInstance_RemoveListener(Ogre::CompositorInstance *self,Ogre::CompositorInstanceListenerDirector *l){
        self->removeListener((Ogre::CompositorInstance::Listener *)l);
    }
SWIGINTERN std::vector<Ogre::CompositorInstance * > *new_std_vector_Sl_Ogre_CompositorInstance_Sm__Sg___SWIG_1(int capacity){
        std::vector<Ogre::CompositorInstance* >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<Ogre::CompositorInstance* >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Ogre::CompositorInstance *std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__getitemcopy(std::vector<Ogre::CompositorInstance * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector<Ogre::CompositorInstance * >::const_reference std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__getitem(std::vector<Ogre::CompositorInstance * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__setitem(std::vector<Ogre::CompositorInstance * > *self,int index,std::vector<Ogre::CompositorInstance * >::value_type const &value){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = value;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__AddRange(std::vector<Ogre::CompositorInstance * > *self,std::vector<Ogre::CompositorInstance * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector<Ogre::CompositorInstance * > *std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__GetRange(std::vector<Ogre::CompositorInstance * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<Ogre::CompositorInstance* >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Insert(std::vector<Ogre::CompositorInstance * > *self,int index,std::vector<Ogre::CompositorInstance * >::value_type const &value){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, value);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__InsertRange(std::vector<Ogre::CompositorInstance * > *self,int index,std::vector<Ogre::CompositorInstance * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__RemoveAt(std::vector<Ogre::CompositorInstance * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__RemoveRange(std::vector<Ogre::CompositorInstance * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector<Ogre::CompositorInstance * > *std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Repeat(std::vector<Ogre::CompositorInstance * >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<Ogre::CompositorInstance* >(count, value);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Reverse__SWIG_0(std::vector<Ogre::CompositorInstance * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Reverse__SWIG_1(std::vector<Ogre::CompositorInstance * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__SetRange(std::vector<Ogre::CompositorInstance * > *self,int index,std::vector<Ogre::CompositorInstance * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN Ogre::CompositorInstance *Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Sg__peekNext(Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *self){ return self->peekNext(); }
SWIGINTERN Ogre::CompositorInstance *Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Sg__getNext(Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *self){ return self->getNext(); }

#include "OgreCompositorChain.h"


#include "OgreCompositorManager.h"

SWIGINTERN Ogre::ResourceManager *Ogre_CompositorManager_GetAsResourceManager(Ogre::CompositorManager *self){
        return (Ogre::ResourceManager*)self;
    }
SWIGINTERN Ogre::CompositorManager &Ogre_CompositorManager_GetSingleton(void){
        return (CompositorManager&)Ogre::CompositorManager::getSingleton();
    }
SWIGINTERN Ogre::CompositorManager *Ogre_CompositorManager_GetSingletonPtr(void){
        return (CompositorManager*)Ogre::CompositorManager::getSingletonPtr();
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionPass(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::CompositionPass *result = 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (Ogre::CompositionPass *)new Ogre::CompositionPass(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionPass(void * jarg1) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setType(void * jarg1, int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::CompositionPass::PassType arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::CompositionPass::PassType)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CompositionPass_getType(void * jarg1) {
  int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::CompositionPass::PassType result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::CompositionPass::PassType)((Ogre::CompositionPass const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setIdentifier(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  (arg1)->setIdentifier(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionPass_getIdentifier(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::uint32)((Ogre::CompositionPass const *)arg1)->getIdentifier();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setMaterial(void * jarg1, void * jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::MaterialPtr arg2 ;
  Ogre::MaterialPtr *argp2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  argp2 = (Ogre::MaterialPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ogre::MaterialPtr", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setMaterial(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setMaterialName(void * jarg1, char * jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setMaterialName((Ogre::String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPass_getMaterial(void * jarg1) {
  void * jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::MaterialPtr result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = ((Ogre::CompositionPass const *)arg1)->getMaterial();
  jresult = (void *)new Ogre::MaterialPtr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setFirstRenderQueue(void * jarg1, unsigned char jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint8 arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  (arg1)->setFirstRenderQueue(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CompositionPass_getFirstRenderQueue(void * jarg1) {
  unsigned char jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::uint8)(arg1)->getFirstRenderQueue();
  jresult = (unsigned char)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setLastRenderQueue(void * jarg1, unsigned char jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint8 arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  (arg1)->setLastRenderQueue(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CompositionPass_getLastRenderQueue(void * jarg1) {
  unsigned char jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint8 result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::uint8)(arg1)->getLastRenderQueue();
  jresult = (unsigned char)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setClearBuffers(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  (arg1)->setClearBuffers(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionPass_getClearBuffers(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::uint32)(arg1)->getClearBuffers();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setClearColour(void * jarg1, void * jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::ColourValue arg2 ;
  Ogre::ColourValue *argp2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  argp2 = (Ogre::ColourValue *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ogre::ColourValue", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setClearColour(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPass_getClearColour(void * jarg1) {
  void * jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  {
    Ogre::ColourValue const &_result_ref = (arg1)->getClearColour();
    result = (Ogre::ColourValue *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setClearDepth(void * jarg1, float jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::Real arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  (arg1)->setClearDepth(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CompositionPass_getClearDepth(void * jarg1) {
  float jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::Real result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::Real)(arg1)->getClearDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setClearStencil(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  (arg1)->setClearStencil(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionPass_getClearStencil(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::uint32)(arg1)->getClearStencil();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setStencilCheck(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStencilCheck(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionPass_getStencilCheck(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  bool result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (bool)(arg1)->getStencilCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setStencilFunc(void * jarg1, int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  CompareFunction arg2 ;
  CompareFunction *argp2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  argp2 = (CompareFunction *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CompareFunction", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setStencilFunc(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CompositionPass_getStencilFunc(void * jarg1) {
  int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  CompareFunction result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (arg1)->getStencilFunc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setStencilRefValue(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  (arg1)->setStencilRefValue(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionPass_getStencilRefValue(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::uint32)(arg1)->getStencilRefValue();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setStencilMask(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  (arg1)->setStencilMask(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionPass_getStencilMask(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::uint32)(arg1)->getStencilMask();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setStencilFailOp(void * jarg1, int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  StencilOperation arg2 ;
  StencilOperation *argp2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  argp2 = (StencilOperation *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null StencilOperation", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setStencilFailOp(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CompositionPass_getStencilFailOp(void * jarg1) {
  int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  StencilOperation result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (arg1)->getStencilFailOp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setStencilDepthFailOp(void * jarg1, int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  StencilOperation arg2 ;
  StencilOperation *argp2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  argp2 = (StencilOperation *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null StencilOperation", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setStencilDepthFailOp(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CompositionPass_getStencilDepthFailOp(void * jarg1) {
  int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  StencilOperation result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (arg1)->getStencilDepthFailOp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setStencilPassOp(void * jarg1, int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  StencilOperation arg2 ;
  StencilOperation *argp2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  argp2 = (StencilOperation *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null StencilOperation", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setStencilPassOp(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CompositionPass_getStencilPassOp(void * jarg1) {
  int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  StencilOperation result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (arg1)->getStencilPassOp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setStencilTwoSidedOperation(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStencilTwoSidedOperation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionPass_getStencilTwoSidedOperation(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  bool result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (bool)(arg1)->getStencilTwoSidedOperation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setInput__SWIG_0(void * jarg1, unsigned long jarg2, char * jarg3) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  size_t arg2 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->setInput(arg2,(Ogre::String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_setInput__SWIG_1(void * jarg1, unsigned long jarg2) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setInput(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CompositionPass_getInput(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  size_t arg2 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    Ogre::String const &_result_ref = (arg1)->getInput(arg2);
    result = (Ogre::String *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionPass_getNumInputs(void * jarg1) {
  unsigned long jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  size_t result;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (arg1)->getNumInputs();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPass_clearAllInputs(void * jarg1) {
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  (arg1)->clearAllInputs();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPass_getParent(void * jarg1) {
  void * jresult ;
  Ogre::CompositionPass *arg1 = (Ogre::CompositionPass *) 0 ;
  Ogre::CompositionTargetPass *result = 0 ;
  
  arg1 = (Ogre::CompositionPass *)jarg1; 
  result = (Ogre::CompositionTargetPass *)(arg1)->getParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_Clear(void * jarg1) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_Add(void * jarg1, void * jarg2) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  std::vector<Ogre::CompositionPass * >::value_type *arg2 = 0 ;
  std::vector<Ogre::CompositionPass * >::value_type temp2 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  temp2 = (std::vector<Ogre::CompositionPass * >::value_type)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<Ogre::CompositionPass * >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionPasses_size(void * jarg1) {
  unsigned long jresult ;
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  std::vector<Ogre::CompositionPass * >::size_type result;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  result = ((std::vector<Ogre::CompositionPass * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionPasses_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  std::vector<Ogre::CompositionPass * >::size_type result;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  result = ((std::vector<Ogre::CompositionPass * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_reserve(void * jarg1, unsigned long jarg2) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  std::vector<Ogre::CompositionPass * >::size_type arg2 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (std::vector<Ogre::CompositionPass * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionPasses__SWIG_0() {
  void * jresult ;
  std::vector<Ogre::CompositionPass * > *result = 0 ;
  
  result = (std::vector<Ogre::CompositionPass * > *)new std::vector<Ogre::CompositionPass * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionPasses__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector<Ogre::CompositionPass * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector<Ogre::CompositionPass * > *)new_std_vector_Sl_Ogre_CompositionPass_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPasses_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  Ogre::CompositionPass *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Ogre::CompositionPass *)std_vector_Sl_Ogre_CompositionPass_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPasses_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionPass * >::value_type *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<Ogre::CompositionPass * >::const_reference _result_ref = std_vector_Sl_Ogre_CompositionPass_Sm__Sg__getitem(arg1,arg2);
      result = (std::vector<Ogre::CompositionPass * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionPass * >::value_type *arg3 = 0 ;
  std::vector<Ogre::CompositionPass * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<Ogre::CompositionPass * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Ogre_CompositionPass_Sm__Sg__setitem(arg1,arg2,(Ogre::CompositionPass *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_AddRange(void * jarg1, void * jarg2) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  std::vector<Ogre::CompositionPass * > *arg2 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (std::vector<Ogre::CompositionPass * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionPass * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Ogre_CompositionPass_Sm__Sg__AddRange(arg1,(std::vector<Ogre::CompositionPass * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPasses_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<Ogre::CompositionPass * > *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector<Ogre::CompositionPass * > *)std_vector_Sl_Ogre_CompositionPass_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionPass * >::value_type *arg3 = 0 ;
  std::vector<Ogre::CompositionPass * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<Ogre::CompositionPass * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Insert(arg1,arg2,(Ogre::CompositionPass *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionPass * > *arg3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<Ogre::CompositionPass * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionPass * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Ogre_CompositionPass_Sm__Sg__InsertRange(arg1,arg2,(std::vector<Ogre::CompositionPass * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_RemoveAt(void * jarg1, int jarg2) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Ogre_CompositionPass_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Ogre_CompositionPass_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPasses_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionPass * >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionPass * > *result = 0 ;
  std::vector<Ogre::CompositionPass * >::value_type temp1 = 0 ;
  
  temp1 = (std::vector<Ogre::CompositionPass * >::value_type)jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector<Ogre::CompositionPass * > *)std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Repeat((Ogre::CompositionPass *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_Reverse__SWIG_0(void * jarg1) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPasses_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionPass * > *arg3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<Ogre::CompositionPass * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionPass * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Ogre_CompositionPass_Sm__Sg__SetRange(arg1,arg2,(std::vector<Ogre::CompositionPass * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionPasses(void * jarg1) {
  std::vector<Ogre::CompositionPass * > *arg1 = (std::vector<Ogre::CompositionPass * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionPass * > *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionPassesIteratorWrap_hasMoreElements(void * jarg1) {
  unsigned int jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *) 0 ;
  bool result;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *)jarg1; 
  result = (bool)((Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > const *)arg1)->hasMoreElements();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionPassesIteratorWrap_moveNext(void * jarg1) {
  Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *) 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *)jarg1; 
  (arg1)->moveNext();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPassesIteratorWrap_peekNext(void * jarg1) {
  void * jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *) 0 ;
  Ogre::CompositionPass *result = 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *)jarg1; 
  result = (Ogre::CompositionPass *)Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Sg__peekNext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionPassesIteratorWrap_getNext(void * jarg1) {
  void * jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *) 0 ;
  Ogre::CompositionPass *result = 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *)jarg1; 
  result = (Ogre::CompositionPass *)Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionPass_Sm__Sg__Sg__getNext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionPassesIteratorWrap(void * jarg1) {
  Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *) 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionTargetPass(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::CompositionTargetPass *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  result = (Ogre::CompositionTargetPass *)new Ogre::CompositionTargetPass(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionTargetPass(void * jarg1) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPass_setInputMode(void * jarg1, int jarg2) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::CompositionTargetPass::InputMode arg2 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  arg2 = (Ogre::CompositionTargetPass::InputMode)jarg2; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CompositionTargetPass_getInputMode(void * jarg1) {
  int jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::CompositionTargetPass::InputMode result;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (Ogre::CompositionTargetPass::InputMode)((Ogre::CompositionTargetPass const *)arg1)->getInputMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CompositionTargetPass_getOutputName(void * jarg1) {
  char * jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  {
    Ogre::String const &_result_ref = ((Ogre::CompositionTargetPass const *)arg1)->getOutputName();
    result = (Ogre::String *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPass_setOnlyInitial(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOnlyInitial(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionTargetPass_getOnlyInitial(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  bool result;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (bool)(arg1)->getOnlyInitial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPass_setVisibilityMask(void * jarg1, unsigned int jarg2) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::uint32 arg2 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  (arg1)->setVisibilityMask(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionTargetPass_getVisibilityMask(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::uint32 result;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (Ogre::uint32)(arg1)->getVisibilityMask();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPass_setMaterialScheme(void * jarg1, char * jarg2) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setMaterialScheme((Ogre::String const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CompositionTargetPass_getMaterialScheme(void * jarg1) {
  char * jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  {
    Ogre::String const &_result_ref = ((Ogre::CompositionTargetPass const *)arg1)->getMaterialScheme();
    result = (Ogre::String *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPass_setLodBias(void * jarg1, float jarg2) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  float arg2 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setLodBias(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CompositionTargetPass_getLodBias(void * jarg1) {
  float jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  float result;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (float)(arg1)->getLodBias();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPass_createPass(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::CompositionPass *result = 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (Ogre::CompositionPass *)(arg1)->createPass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPass_removePass(void * jarg1, unsigned long jarg2) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removePass(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPass_getPass(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  size_t arg2 ;
  Ogre::CompositionPass *result = 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Ogre::CompositionPass *)(arg1)->getPass(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionTargetPass_getNumPasses(void * jarg1) {
  unsigned long jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  size_t result;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (arg1)->getNumPasses();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPass_removeAllPasses(void * jarg1) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  (arg1)->removeAllPasses();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPass_getPassIterator(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  SwigValueWrapper<Ogre::VectorIterator<std::vector<Ogre::CompositionPass * > > > result;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (arg1)->getPassIterator();
  jresult = new Ogre::CompositionTargetPass::PassIterator((Ogre::CompositionTargetPass::PassIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPass_getParent(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  result = (Ogre::CompositionTechnique *)(arg1)->getParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPass_SetOutputName(void * jarg1, char * jarg2) {
  Ogre::CompositionTargetPass *arg1 = (Ogre::CompositionTargetPass *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::CompositionTargetPass *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Ogre_CompositionTargetPass_SetOutputName(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_Clear(void * jarg1) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_Add(void * jarg1, void * jarg2) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  std::vector<Ogre::CompositionTargetPass * >::value_type *arg2 = 0 ;
  std::vector<Ogre::CompositionTargetPass * >::value_type temp2 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  temp2 = (std::vector<Ogre::CompositionTargetPass * >::value_type)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<Ogre::CompositionTargetPass * >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionTargetPasses_size(void * jarg1) {
  unsigned long jresult ;
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  std::vector<Ogre::CompositionTargetPass * >::size_type result;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  result = ((std::vector<Ogre::CompositionTargetPass * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionTargetPasses_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  std::vector<Ogre::CompositionTargetPass * >::size_type result;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  result = ((std::vector<Ogre::CompositionTargetPass * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_reserve(void * jarg1, unsigned long jarg2) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  std::vector<Ogre::CompositionTargetPass * >::size_type arg2 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (std::vector<Ogre::CompositionTargetPass * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionTargetPasses__SWIG_0() {
  void * jresult ;
  std::vector<Ogre::CompositionTargetPass * > *result = 0 ;
  
  result = (std::vector<Ogre::CompositionTargetPass * > *)new std::vector<Ogre::CompositionTargetPass * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionTargetPasses__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector<Ogre::CompositionTargetPass * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector<Ogre::CompositionTargetPass * > *)new_std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPasses_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  Ogre::CompositionTargetPass *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Ogre::CompositionTargetPass *)std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPasses_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTargetPass * >::value_type *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<Ogre::CompositionTargetPass * >::const_reference _result_ref = std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__getitem(arg1,arg2);
      result = (std::vector<Ogre::CompositionTargetPass * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTargetPass * >::value_type *arg3 = 0 ;
  std::vector<Ogre::CompositionTargetPass * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<Ogre::CompositionTargetPass * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__setitem(arg1,arg2,(Ogre::CompositionTargetPass *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_AddRange(void * jarg1, void * jarg2) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  std::vector<Ogre::CompositionTargetPass * > *arg2 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (std::vector<Ogre::CompositionTargetPass * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionTargetPass * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__AddRange(arg1,(std::vector<Ogre::CompositionTargetPass * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPasses_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<Ogre::CompositionTargetPass * > *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector<Ogre::CompositionTargetPass * > *)std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTargetPass * >::value_type *arg3 = 0 ;
  std::vector<Ogre::CompositionTargetPass * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<Ogre::CompositionTargetPass * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Insert(arg1,arg2,(Ogre::CompositionTargetPass *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTargetPass * > *arg3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<Ogre::CompositionTargetPass * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionTargetPass * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__InsertRange(arg1,arg2,(std::vector<Ogre::CompositionTargetPass * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_RemoveAt(void * jarg1, int jarg2) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPasses_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionTargetPass * >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTargetPass * > *result = 0 ;
  std::vector<Ogre::CompositionTargetPass * >::value_type temp1 = 0 ;
  
  temp1 = (std::vector<Ogre::CompositionTargetPass * >::value_type)jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector<Ogre::CompositionTargetPass * > *)std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Repeat((Ogre::CompositionTargetPass *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_Reverse__SWIG_0(void * jarg1) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPasses_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTargetPass * > *arg3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<Ogre::CompositionTargetPass * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionTargetPass * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__SetRange(arg1,arg2,(std::vector<Ogre::CompositionTargetPass * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionTargetPasses(void * jarg1) {
  std::vector<Ogre::CompositionTargetPass * > *arg1 = (std::vector<Ogre::CompositionTargetPass * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTargetPass * > *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionTargetPassesIteratorWrap_hasMoreElements(void * jarg1) {
  unsigned int jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *) 0 ;
  bool result;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *)jarg1; 
  result = (bool)((Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > const *)arg1)->hasMoreElements();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTargetPassesIteratorWrap_moveNext(void * jarg1) {
  Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *) 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *)jarg1; 
  (arg1)->moveNext();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPassesIteratorWrap_peekNext(void * jarg1) {
  void * jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *) 0 ;
  Ogre::CompositionTargetPass *result = 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *)jarg1; 
  result = (Ogre::CompositionTargetPass *)Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Sg__peekNext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTargetPassesIteratorWrap_getNext(void * jarg1) {
  void * jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *) 0 ;
  Ogre::CompositionTargetPass *result = 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *)jarg1; 
  result = (Ogre::CompositionTargetPass *)Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionTargetPass_Sm__Sg__Sg__getNext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionTargetPassesIteratorWrap(void * jarg1) {
  Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *) 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionTechnique(void * jarg1) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  result = (Ogre::CompositionTechnique *)new Ogre::CompositionTechnique(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionTechnique(void * jarg1) {
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechnique_removeTextureDefinition(void * jarg1, unsigned long jarg2) {
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removeTextureDefinition(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionTechnique_getNumTextureDefinitions(void * jarg1) {
  unsigned long jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  size_t result;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  result = (arg1)->getNumTextureDefinitions();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechnique_removeAllTextureDefinitions(void * jarg1) {
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  (arg1)->removeAllTextureDefinitions();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_createTargetPass(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::CompositionTargetPass *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  result = (Ogre::CompositionTargetPass *)(arg1)->createTargetPass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechnique_removeTargetPass(void * jarg1, unsigned long jarg2) {
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removeTargetPass(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_getTargetPass(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  size_t arg2 ;
  Ogre::CompositionTargetPass *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Ogre::CompositionTargetPass *)(arg1)->getTargetPass(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionTechnique_getNumTargetPasses(void * jarg1) {
  unsigned long jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  size_t result;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  result = (arg1)->getNumTargetPasses();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechnique_removeAllTargetPasses(void * jarg1) {
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  (arg1)->removeAllTargetPasses();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_getTargetPassIterator(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  SwigValueWrapper<Ogre::VectorIterator<std::vector<Ogre::CompositionTargetPass * > > > result;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  result = (arg1)->getTargetPassIterator();
  jresult = new Ogre::CompositionTechnique::TargetPassIterator((Ogre::CompositionTechnique::TargetPassIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_getOutputTargetPass(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::CompositionTargetPass *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  result = (Ogre::CompositionTargetPass *)(arg1)->getOutputTargetPass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionTechnique_isSupported(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->isSupported(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_createInstance(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::CompositorChain *arg2 = (Ogre::CompositorChain *) 0 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  arg2 = (Ogre::CompositorChain *)jarg2; 
  result = (Ogre::CompositorInstance *)(arg1)->createInstance(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechnique_destroyInstance(void * jarg1, void * jarg2) {
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::CompositorInstance *arg2 = (Ogre::CompositorInstance *) 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  arg2 = (Ogre::CompositorInstance *)jarg2; 
  (arg1)->destroyInstance(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_getParent(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::Compositor *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  result = (Ogre::Compositor *)(arg1)->getParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_CreateTextureDefinition(void * jarg1, char * jarg2) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::CTTextureDefinition *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (Ogre::CTTextureDefinition *)Ogre_CompositionTechnique_CreateTextureDefinition(arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_GetTextureDefinition(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  size_t arg2 ;
  Ogre::CTTextureDefinition *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Ogre::CTTextureDefinition *)Ogre_CompositionTechnique_GetTextureDefinition(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechnique_GetTextureDefinitionIterator(void * jarg1) {
  void * jresult ;
  Ogre::CompositionTechnique *arg1 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::CTTextureDefinitionsIterator *result = 0 ;
  
  arg1 = (Ogre::CompositionTechnique *)jarg1; 
  result = (Ogre::CTTextureDefinitionsIterator *)Ogre_CompositionTechnique_GetTextureDefinitionIterator(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTTextureDefinition_getName(void * jarg1) {
  char * jresult ;
  Ogre::CTTextureDefinition *arg1 = (Ogre::CTTextureDefinition *) 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::CTTextureDefinition *)jarg1; 
  {
    Ogre::String const &_result_ref = (arg1)->getName();
    result = (Ogre::String *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTTextureDefinition_setName(void * jarg1, char * jarg2) {
  Ogre::CTTextureDefinition *arg1 = (Ogre::CTTextureDefinition *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  arg1 = (Ogre::CTTextureDefinition *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setName((Ogre::String const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CTTextureDefinition_getWidth(void * jarg1) {
  unsigned long jresult ;
  Ogre::CTTextureDefinition *arg1 = (Ogre::CTTextureDefinition *) 0 ;
  size_t result;
  
  arg1 = (Ogre::CTTextureDefinition *)jarg1; 
  result = (arg1)->getWidth();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTTextureDefinition_setWidth(void * jarg1, unsigned long jarg2) {
  Ogre::CTTextureDefinition *arg1 = (Ogre::CTTextureDefinition *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::CTTextureDefinition *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CTTextureDefinition_getHeight(void * jarg1) {
  unsigned long jresult ;
  Ogre::CTTextureDefinition *arg1 = (Ogre::CTTextureDefinition *) 0 ;
  size_t result;
  
  arg1 = (Ogre::CTTextureDefinition *)jarg1; 
  result = (arg1)->getHeight();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTTextureDefinition_setHeight(void * jarg1, unsigned long jarg2) {
  Ogre::CTTextureDefinition *arg1 = (Ogre::CTTextureDefinition *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::CTTextureDefinition *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTTextureDefinition_getFormat(void * jarg1) {
  int jresult ;
  Ogre::CTTextureDefinition *arg1 = (Ogre::CTTextureDefinition *) 0 ;
  PixelFormat result;
  
  arg1 = (Ogre::CTTextureDefinition *)jarg1; 
  result = (arg1)->getFormat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTTextureDefinition_setFormat(void * jarg1, int jarg2) {
  Ogre::CTTextureDefinition *arg1 = (Ogre::CTTextureDefinition *) 0 ;
  PixelFormat arg2 ;
  PixelFormat *argp2 ;
  
  arg1 = (Ogre::CTTextureDefinition *)jarg1; 
  argp2 = (PixelFormat *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PixelFormat", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setFormat(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTTextureDefinitionsIterator_hasMoreElements(void * jarg1) {
  unsigned int jresult ;
  Ogre::CTTextureDefinitionsIterator *arg1 = (Ogre::CTTextureDefinitionsIterator *) 0 ;
  bool result;
  
  arg1 = (Ogre::CTTextureDefinitionsIterator *)jarg1; 
  result = (bool)((Ogre::CTTextureDefinitionsIterator const *)arg1)->hasMoreElements();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTTextureDefinitionsIterator_moveNext(void * jarg1) {
  Ogre::CTTextureDefinitionsIterator *arg1 = (Ogre::CTTextureDefinitionsIterator *) 0 ;
  
  arg1 = (Ogre::CTTextureDefinitionsIterator *)jarg1; 
  (arg1)->moveNext();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTTextureDefinitionsIterator_peekNext(void * jarg1) {
  void * jresult ;
  Ogre::CTTextureDefinitionsIterator *arg1 = (Ogre::CTTextureDefinitionsIterator *) 0 ;
  Ogre::CTTextureDefinition *result = 0 ;
  
  arg1 = (Ogre::CTTextureDefinitionsIterator *)jarg1; 
  result = (Ogre::CTTextureDefinition *)(arg1)->peekNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTTextureDefinitionsIterator_getNext(void * jarg1) {
  void * jresult ;
  Ogre::CTTextureDefinitionsIterator *arg1 = (Ogre::CTTextureDefinitionsIterator *) 0 ;
  Ogre::CTTextureDefinition *result = 0 ;
  
  arg1 = (Ogre::CTTextureDefinitionsIterator *)jarg1; 
  result = (Ogre::CTTextureDefinition *)(arg1)->getNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTTextureDefinitionsIterator_next(void * jarg1) {
  void * jresult ;
  Ogre::CTTextureDefinitionsIterator *arg1 = (Ogre::CTTextureDefinitionsIterator *) 0 ;
  Ogre::CTTextureDefinition *result = 0 ;
  
  arg1 = (Ogre::CTTextureDefinitionsIterator *)jarg1; 
  result = (Ogre::CTTextureDefinition *)(arg1)->next();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_Clear(void * jarg1) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_Add(void * jarg1, void * jarg2) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  std::vector<Ogre::CompositionTechnique * >::value_type *arg2 = 0 ;
  std::vector<Ogre::CompositionTechnique * >::value_type temp2 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  temp2 = (std::vector<Ogre::CompositionTechnique * >::value_type)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<Ogre::CompositionTechnique * >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionTechniques_size(void * jarg1) {
  unsigned long jresult ;
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  std::vector<Ogre::CompositionTechnique * >::size_type result;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  result = ((std::vector<Ogre::CompositionTechnique * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositionTechniques_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  std::vector<Ogre::CompositionTechnique * >::size_type result;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  result = ((std::vector<Ogre::CompositionTechnique * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_reserve(void * jarg1, unsigned long jarg2) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  std::vector<Ogre::CompositionTechnique * >::size_type arg2 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (std::vector<Ogre::CompositionTechnique * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionTechniques__SWIG_0() {
  void * jresult ;
  std::vector<Ogre::CompositionTechnique * > *result = 0 ;
  
  result = (std::vector<Ogre::CompositionTechnique * > *)new std::vector<Ogre::CompositionTechnique * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositionTechniques__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector<Ogre::CompositionTechnique * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector<Ogre::CompositionTechnique * > *)new_std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechniques_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Ogre::CompositionTechnique *)std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechniques_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTechnique * >::value_type *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<Ogre::CompositionTechnique * >::const_reference _result_ref = std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__getitem(arg1,arg2);
      result = (std::vector<Ogre::CompositionTechnique * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTechnique * >::value_type *arg3 = 0 ;
  std::vector<Ogre::CompositionTechnique * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<Ogre::CompositionTechnique * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__setitem(arg1,arg2,(Ogre::CompositionTechnique *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_AddRange(void * jarg1, void * jarg2) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  std::vector<Ogre::CompositionTechnique * > *arg2 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (std::vector<Ogre::CompositionTechnique * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionTechnique * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__AddRange(arg1,(std::vector<Ogre::CompositionTechnique * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechniques_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<Ogre::CompositionTechnique * > *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector<Ogre::CompositionTechnique * > *)std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTechnique * >::value_type *arg3 = 0 ;
  std::vector<Ogre::CompositionTechnique * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<Ogre::CompositionTechnique * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Insert(arg1,arg2,(Ogre::CompositionTechnique *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTechnique * > *arg3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<Ogre::CompositionTechnique * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionTechnique * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__InsertRange(arg1,arg2,(std::vector<Ogre::CompositionTechnique * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_RemoveAt(void * jarg1, int jarg2) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechniques_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositionTechnique * >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTechnique * > *result = 0 ;
  std::vector<Ogre::CompositionTechnique * >::value_type temp1 = 0 ;
  
  temp1 = (std::vector<Ogre::CompositionTechnique * >::value_type)jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector<Ogre::CompositionTechnique * > *)std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Repeat((Ogre::CompositionTechnique *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_Reverse__SWIG_0(void * jarg1) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniques_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositionTechnique * > *arg3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<Ogre::CompositionTechnique * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositionTechnique * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__SetRange(arg1,arg2,(std::vector<Ogre::CompositionTechnique * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionTechniques(void * jarg1) {
  std::vector<Ogre::CompositionTechnique * > *arg1 = (std::vector<Ogre::CompositionTechnique * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositionTechnique * > *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositionTechniquesIteratorWrap_hasMoreElements(void * jarg1) {
  unsigned int jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *) 0 ;
  bool result;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *)jarg1; 
  result = (bool)((Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > const *)arg1)->hasMoreElements();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositionTechniquesIteratorWrap_moveNext(void * jarg1) {
  Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *) 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *)jarg1; 
  (arg1)->moveNext();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechniquesIteratorWrap_peekNext(void * jarg1) {
  void * jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *) 0 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *)jarg1; 
  result = (Ogre::CompositionTechnique *)Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Sg__peekNext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositionTechniquesIteratorWrap_getNext(void * jarg1) {
  void * jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *) 0 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *)jarg1; 
  result = (Ogre::CompositionTechnique *)Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositionTechnique_Sm__Sg__Sg__getNext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositionTechniquesIteratorWrap(void * jarg1) {
  Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *) 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Compositor__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::ManualResourceLoader *arg6 = (Ogre::ManualResourceLoader *) 0 ;
  Ogre::Compositor *result = 0 ;
  ResourceHandle *argp3 ;
  
  arg1 = (Ogre::ResourceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  argp3 = (ResourceHandle *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ResourceHandle", 0);
    return 0;
  }
  arg3 = *argp3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = (Ogre::ManualResourceLoader *)jarg6; 
  result = (Ogre::Compositor *)new Ogre::Compositor(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Compositor__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::Compositor *result = 0 ;
  ResourceHandle *argp3 ;
  
  arg1 = (Ogre::ResourceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  argp3 = (ResourceHandle *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ResourceHandle", 0);
    return 0;
  }
  arg3 = *argp3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  result = (Ogre::Compositor *)new Ogre::Compositor(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Compositor__SWIG_2(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4) {
  void * jresult ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Compositor *result = 0 ;
  ResourceHandle *argp3 ;
  
  arg1 = (Ogre::ResourceManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  argp3 = (ResourceHandle *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ResourceHandle", 0);
    return 0;
  }
  arg3 = *argp3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (Ogre::Compositor *)new Ogre::Compositor(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Compositor(void * jarg1) {
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Compositor_createTechnique(void * jarg1) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  result = (Ogre::CompositionTechnique *)(arg1)->createTechnique();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Compositor_removeTechnique(void * jarg1, unsigned long jarg2) {
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removeTechnique(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Compositor_getTechnique(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  size_t arg2 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Ogre::CompositionTechnique *)(arg1)->getTechnique(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Compositor_getNumTechniques(void * jarg1) {
  unsigned long jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  size_t result;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  result = (arg1)->getNumTechniques();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Compositor_removeAllTechniques(void * jarg1) {
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  (arg1)->removeAllTechniques();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Compositor_getTechniqueIterator(void * jarg1) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  SwigValueWrapper<Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > > result;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  result = (arg1)->getTechniqueIterator();
  jresult = new Ogre::Compositor::TechniqueIterator((Ogre::Compositor::TechniqueIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Compositor_getSupportedTechnique(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  size_t arg2 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Ogre::CompositionTechnique *)(arg1)->getSupportedTechnique(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Compositor_getNumSupportedTechniques(void * jarg1) {
  unsigned long jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  size_t result;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  result = (arg1)->getNumSupportedTechniques();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Compositor_getSupportedTechniqueIterator(void * jarg1) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  SwigValueWrapper<Ogre::VectorIterator<std::vector<Ogre::CompositionTechnique * > > > result;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  result = (arg1)->getSupportedTechniqueIterator();
  jresult = new Ogre::Compositor::TechniqueIterator((Ogre::Compositor::TechniqueIterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Compositor_GetAsResource(void * jarg1) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  Ogre::Resource *result = 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  result = (Ogre::Resource *)Ogre_Compositor_GetAsResource(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorPtr__SWIG_0() {
  void * jresult ;
  Ogre::CompositorPtr *result = 0 ;
  
  result = (Ogre::CompositorPtr *)new Ogre::CompositorPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  Ogre::CompositorPtr *result = 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  result = (Ogre::CompositorPtr *)new Ogre::CompositorPtr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorPtr__SWIG_2(void * jarg1) {
  void * jresult ;
  Ogre::CompositorPtr *arg1 = 0 ;
  Ogre::CompositorPtr *result = 0 ;
  
  arg1 = (Ogre::CompositorPtr *)jarg1;
  if(!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Ogre::CompositorPtr const & type is null", 0);
    return 0;
  } 
  result = (Ogre::CompositorPtr *)new Ogre::CompositorPtr((Ogre::CompositorPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorPtr__SWIG_3(void * jarg1) {
  void * jresult ;
  ResourcePtr *arg1 = 0 ;
  Ogre::CompositorPtr *result = 0 ;
  
  arg1 = (ResourcePtr *)jarg1; 
  result = (Ogre::CompositorPtr *)new Ogre::CompositorPtr((ResourcePtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorPtr_Get(void * jarg1) {
  void * jresult ;
  Ogre::CompositorPtr *arg1 = (Ogre::CompositorPtr *) 0 ;
  Ogre::Compositor *result = 0 ;
  
  arg1 = (Ogre::CompositorPtr *)jarg1; 
  result = (Ogre::Compositor *)Ogre_CompositorPtr_Get(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositorPtr_IsUnique(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositorPtr *arg1 = (Ogre::CompositorPtr *) 0 ;
  bool result;
  
  arg1 = (Ogre::CompositorPtr *)jarg1; 
  result = (bool)Ogre_CompositorPtr_IsUnique(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositorPtr_UseCount(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositorPtr *arg1 = (Ogre::CompositorPtr *) 0 ;
  unsigned int result;
  
  arg1 = (Ogre::CompositorPtr *)jarg1; 
  result = (unsigned int)Ogre_CompositorPtr_UseCount(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositorPtr_IsNull(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositorPtr *arg1 = (Ogre::CompositorPtr *) 0 ;
  bool result;
  
  arg1 = (Ogre::CompositorPtr *)jarg1; 
  result = (bool)Ogre_CompositorPtr_IsNull(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorPtr_SetNull(void * jarg1) {
  Ogre::CompositorPtr *arg1 = (Ogre::CompositorPtr *) 0 ;
  
  arg1 = (Ogre::CompositorPtr *)jarg1; 
  Ogre_CompositorPtr_SetNull(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositorPtr(void * jarg1) {
  Ogre::CompositorPtr *arg1 = (Ogre::CompositorPtr *) 0 ;
  
  arg1 = (Ogre::CompositorPtr *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RENDER_QUEUE_COUNT_get() {
  unsigned long jresult ;
  size_t result;
  
  result = (size_t)Ogre::RENDER_QUEUE_COUNT;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorInstance(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Ogre::Compositor *arg1 = (Ogre::Compositor *) 0 ;
  Ogre::CompositionTechnique *arg2 = (Ogre::CompositionTechnique *) 0 ;
  Ogre::CompositorChain *arg3 = (Ogre::CompositorChain *) 0 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (Ogre::Compositor *)jarg1; 
  arg2 = (Ogre::CompositionTechnique *)jarg2; 
  arg3 = (Ogre::CompositorChain *)jarg3; 
  result = (Ogre::CompositorInstance *)new Ogre::CompositorInstance(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositorInstance(void * jarg1) {
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstance_setEnabled(void * jarg1, unsigned int jarg2) {
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositorInstance_getEnabled(void * jarg1) {
  unsigned int jresult ;
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  bool result;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  result = (bool)(arg1)->getEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CompositorInstance_getTextureInstanceName(void * jarg1, char * jarg2) {
  char * jresult ;
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *result = 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    Ogre::String const &_result_ref = (arg1)->getTextureInstanceName((Ogre::String const &)*arg2);
    result = (Ogre::String *) &_result_ref;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstance__prepareForCompilation(void * jarg1) {
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  (arg1)->_prepareForCompilation();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstance_getCompositor(void * jarg1) {
  void * jresult ;
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  Ogre::Compositor *result = 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  result = (Ogre::Compositor *)(arg1)->getCompositor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstance_getTechnique(void * jarg1) {
  void * jresult ;
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  Ogre::CompositionTechnique *result = 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  result = (Ogre::CompositionTechnique *)(arg1)->getTechnique();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstance_getChain(void * jarg1) {
  void * jresult ;
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  Ogre::CompositorChain *result = 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  result = (Ogre::CompositorChain *)(arg1)->getChain();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstance__fireNotifyMaterialSetup(void * jarg1, unsigned int jarg2, void * jarg3) {
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::MaterialPtr *arg3 = 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::MaterialPtr *)jarg3; 
  (arg1)->_fireNotifyMaterialSetup(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstance__fireNotifyMaterialRender(void * jarg1, unsigned int jarg2, void * jarg3) {
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::MaterialPtr *arg3 = 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::MaterialPtr *)jarg3; 
  (arg1)->_fireNotifyMaterialRender(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstance_AddListener(void * jarg1, void * jarg2) {
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  Ogre::CompositorInstanceListenerDirector *arg2 = (Ogre::CompositorInstanceListenerDirector *) 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  arg2 = (Ogre::CompositorInstanceListenerDirector *)jarg2; 
  Ogre_CompositorInstance_AddListener(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstance_RemoveListener(void * jarg1, void * jarg2) {
  Ogre::CompositorInstance *arg1 = (Ogre::CompositorInstance *) 0 ;
  Ogre::CompositorInstanceListenerDirector *arg2 = (Ogre::CompositorInstanceListenerDirector *) 0 ;
  
  arg1 = (Ogre::CompositorInstance *)jarg1; 
  arg2 = (Ogre::CompositorInstanceListenerDirector *)jarg2; 
  Ogre_CompositorInstance_RemoveListener(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorInstanceListenerDirector() {
  void * jresult ;
  Ogre::CompositorInstanceListenerDirector *result = 0 ;
  
  result = (Ogre::CompositorInstanceListenerDirector *)new Ogre::CompositorInstanceListenerDirector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositorInstanceListenerDirector(void * jarg1) {
  Ogre::CompositorInstanceListenerDirector *arg1 = (Ogre::CompositorInstanceListenerDirector *) 0 ;
  
  arg1 = (Ogre::CompositorInstanceListenerDirector *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstanceListenerDirector_notifyMaterialSetup(void * jarg1, unsigned int jarg2, void * jarg3) {
  Ogre::CompositorInstanceListenerDirector *arg1 = (Ogre::CompositorInstanceListenerDirector *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::MaterialPtr *arg3 = 0 ;
  
  arg1 = (Ogre::CompositorInstanceListenerDirector *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::MaterialPtr *)jarg3; 
  (arg1)->notifyMaterialSetup(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstanceListenerDirector_notifyMaterialRender(void * jarg1, unsigned int jarg2, void * jarg3) {
  Ogre::CompositorInstanceListenerDirector *arg1 = (Ogre::CompositorInstanceListenerDirector *) 0 ;
  Ogre::uint32 arg2 ;
  Ogre::MaterialPtr *arg3 = 0 ;
  
  arg1 = (Ogre::CompositorInstanceListenerDirector *)jarg1; 
  arg2 = (Ogre::uint32)jarg2; 
  arg3 = (Ogre::MaterialPtr *)jarg3; 
  (arg1)->notifyMaterialRender(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_Clear(void * jarg1) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_Add(void * jarg1, void * jarg2) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  std::vector<Ogre::CompositorInstance * >::value_type *arg2 = 0 ;
  std::vector<Ogre::CompositorInstance * >::value_type temp2 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  temp2 = (std::vector<Ogre::CompositorInstance * >::value_type)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<Ogre::CompositorInstance * >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositorInstances_size(void * jarg1) {
  unsigned long jresult ;
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  std::vector<Ogre::CompositorInstance * >::size_type result;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  result = ((std::vector<Ogre::CompositorInstance * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositorInstances_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  std::vector<Ogre::CompositorInstance * >::size_type result;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  result = ((std::vector<Ogre::CompositorInstance * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_reserve(void * jarg1, unsigned long jarg2) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  std::vector<Ogre::CompositorInstance * >::size_type arg2 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (std::vector<Ogre::CompositorInstance * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorInstances__SWIG_0() {
  void * jresult ;
  std::vector<Ogre::CompositorInstance * > *result = 0 ;
  
  result = (std::vector<Ogre::CompositorInstance * > *)new std::vector<Ogre::CompositorInstance * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorInstances__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector<Ogre::CompositorInstance * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector<Ogre::CompositorInstance * > *)new_std_vector_Sl_Ogre_CompositorInstance_Sm__Sg___SWIG_1(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstances_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Ogre::CompositorInstance *)std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstances_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositorInstance * >::value_type *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<Ogre::CompositorInstance * >::const_reference _result_ref = std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__getitem(arg1,arg2);
      result = (std::vector<Ogre::CompositorInstance * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositorInstance * >::value_type *arg3 = 0 ;
  std::vector<Ogre::CompositorInstance * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<Ogre::CompositorInstance * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__setitem(arg1,arg2,(Ogre::CompositorInstance *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_AddRange(void * jarg1, void * jarg2) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  std::vector<Ogre::CompositorInstance * > *arg2 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (std::vector<Ogre::CompositorInstance * > *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositorInstance * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__AddRange(arg1,(std::vector<Ogre::CompositorInstance * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstances_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<Ogre::CompositorInstance * > *result = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector<Ogre::CompositorInstance * > *)std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositorInstance * >::value_type *arg3 = 0 ;
  std::vector<Ogre::CompositorInstance * >::value_type temp3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<Ogre::CompositorInstance * >::value_type)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Insert(arg1,arg2,(Ogre::CompositorInstance *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositorInstance * > *arg3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<Ogre::CompositorInstance * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositorInstance * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__InsertRange(arg1,arg2,(std::vector<Ogre::CompositorInstance * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_RemoveAt(void * jarg1, int jarg2) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstances_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector<Ogre::CompositorInstance * >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector<Ogre::CompositorInstance * > *result = 0 ;
  std::vector<Ogre::CompositorInstance * >::value_type temp1 = 0 ;
  
  temp1 = (std::vector<Ogre::CompositorInstance * >::value_type)jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector<Ogre::CompositorInstance * > *)std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Repeat((Ogre::CompositorInstance *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_Reverse__SWIG_0(void * jarg1) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstances_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  int arg2 ;
  std::vector<Ogre::CompositorInstance * > *arg3 = 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector<Ogre::CompositorInstance * > *)jarg3;
  if(!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector<Ogre::CompositorInstance * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__SetRange(arg1,arg2,(std::vector<Ogre::CompositorInstance * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositorInstances(void * jarg1) {
  std::vector<Ogre::CompositorInstance * > *arg1 = (std::vector<Ogre::CompositorInstance * > *) 0 ;
  
  arg1 = (std::vector<Ogre::CompositorInstance * > *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositorInstancesIteratorWrap_hasMoreElements(void * jarg1) {
  unsigned int jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *) 0 ;
  bool result;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *)jarg1; 
  result = (bool)((Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > const *)arg1)->hasMoreElements();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorInstancesIteratorWrap_moveNext(void * jarg1) {
  Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *) 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *)jarg1; 
  (arg1)->moveNext();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstancesIteratorWrap_peekNext(void * jarg1) {
  void * jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *) 0 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *)jarg1; 
  result = (Ogre::CompositorInstance *)Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Sg__peekNext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorInstancesIteratorWrap_getNext(void * jarg1) {
  void * jresult ;
  Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *) 0 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *)jarg1; 
  result = (Ogre::CompositorInstance *)Ogre_VectorIterator_Sl_std_vector_Sl_Ogre_CompositorInstance_Sm__Sg__Sg__getNext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositorInstancesIteratorWrap(void * jarg1) {
  Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *) 0 ;
  
  arg1 = (Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorChain(void * jarg1) {
  void * jresult ;
  Ogre::Viewport *arg1 = (Ogre::Viewport *) 0 ;
  Ogre::CompositorChain *result = 0 ;
  
  arg1 = (Ogre::Viewport *)jarg1; 
  result = (Ogre::CompositorChain *)new Ogre::CompositorChain(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositorChain(void * jarg1) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositorChain_LAST_get() {
  unsigned long jresult ;
  size_t result;
  
  result = Ogre::CompositorChain::LAST;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositorChain_BEST_get() {
  unsigned long jresult ;
  size_t result;
  
  result = Ogre::CompositorChain::BEST;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorChain_addCompositor__SWIG_0(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4) {
  void * jresult ;
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  Ogre::CompositorPtr arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Ogre::CompositorInstance *result = 0 ;
  Ogre::CompositorPtr *argp2 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  argp2 = (Ogre::CompositorPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ogre::CompositorPtr", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (Ogre::CompositorInstance *)(arg1)->addCompositor(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorChain_addCompositor__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  Ogre::CompositorPtr arg2 ;
  size_t arg3 ;
  Ogre::CompositorInstance *result = 0 ;
  Ogre::CompositorPtr *argp2 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  argp2 = (Ogre::CompositorPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ogre::CompositorPtr", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  result = (Ogre::CompositorInstance *)(arg1)->addCompositor(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorChain_addCompositor__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  Ogre::CompositorPtr arg2 ;
  Ogre::CompositorInstance *result = 0 ;
  Ogre::CompositorPtr *argp2 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  argp2 = (Ogre::CompositorPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ogre::CompositorPtr", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Ogre::CompositorInstance *)(arg1)->addCompositor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain_removeCompositor__SWIG_0(void * jarg1, unsigned long jarg2) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  size_t arg2 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removeCompositor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain_removeCompositor__SWIG_1(void * jarg1) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  (arg1)->removeCompositor();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CompositorChain_getNumCompositors(void * jarg1) {
  unsigned long jresult ;
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  size_t result;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  result = (arg1)->getNumCompositors();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain_removeAllCompositors(void * jarg1) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  (arg1)->removeAllCompositors();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorChain_getCompositor(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  size_t arg2 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Ogre::CompositorInstance *)(arg1)->getCompositor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorChain__getOriginalSceneCompositor(void * jarg1) {
  void * jresult ;
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  result = (Ogre::CompositorInstance *)(arg1)->_getOriginalSceneCompositor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorChain_getCompositors(void * jarg1) {
  void * jresult ;
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  SwigValueWrapper<Ogre::VectorIterator<std::vector<Ogre::CompositorInstance * > > > result;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  result = (arg1)->getCompositors();
  jresult = new Ogre::CompositorChain::InstanceIterator((Ogre::CompositorChain::InstanceIterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain_setCompositorEnabled(void * jarg1, unsigned long jarg2, unsigned int jarg3) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setCompositorEnabled(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain_preRenderTargetUpdate(void * jarg1, void * jarg2) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  RenderTargetEvent *arg2 = 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  arg2 = (RenderTargetEvent *)jarg2; 
  (arg1)->preRenderTargetUpdate((RenderTargetEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain_preViewportUpdate(void * jarg1, void * jarg2) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  RenderTargetViewportEvent *arg2 = 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  arg2 = (RenderTargetViewportEvent *)jarg2; 
  (arg1)->preViewportUpdate((RenderTargetViewportEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain_postViewportUpdate(void * jarg1, void * jarg2) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  RenderTargetViewportEvent *arg2 = 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  arg2 = (RenderTargetViewportEvent *)jarg2; 
  (arg1)->postViewportUpdate((RenderTargetViewportEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain_viewportRemoved(void * jarg1, void * jarg2) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  RenderTargetViewportEvent *arg2 = 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  arg2 = (RenderTargetViewportEvent *)jarg2; 
  (arg1)->viewportRemoved((RenderTargetViewportEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain__markDirty(void * jarg1) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  (arg1)->_markDirty();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorChain_getViewport(void * jarg1) {
  void * jresult ;
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  Ogre::Viewport *result = 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  result = (Ogre::Viewport *)(arg1)->getViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorChain__removeInstance(void * jarg1, void * jarg2) {
  Ogre::CompositorChain *arg1 = (Ogre::CompositorChain *) 0 ;
  Ogre::CompositorInstance *arg2 = (Ogre::CompositorInstance *) 0 ;
  
  arg1 = (Ogre::CompositorChain *)jarg1; 
  arg2 = (Ogre::CompositorInstance *)jarg2; 
  (arg1)->_removeInstance(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompositorManager() {
  void * jresult ;
  Ogre::CompositorManager *result = 0 ;
  
  result = (Ogre::CompositorManager *)new Ogre::CompositorManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompositorManager(void * jarg1) {
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorManager_createImpl(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, unsigned int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::ManualResourceLoader *arg6 = (Ogre::ManualResourceLoader *) 0 ;
  NameValuePairList *arg7 = (NameValuePairList *) 0 ;
  Ogre::Resource *result = 0 ;
  ResourceHandle *argp3 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  argp3 = (ResourceHandle *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ResourceHandle", 0);
    return 0;
  }
  arg3 = *argp3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = (Ogre::ManualResourceLoader *)jarg6; 
  arg7 = (NameValuePairList *)jarg7; 
  result = (Ogre::Resource *)(arg1)->createImpl((Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4,arg5,arg6,(NameValuePairList const *)arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorManager_initialise(void * jarg1) {
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  (arg1)->initialise();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorManager_parseScript(void * jarg1, void * jarg2, char * jarg3) {
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  DataStreamPtr *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  arg2 = (DataStreamPtr *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->parseScript(*arg2,(Ogre::String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorManager_getCompositorChain(void * jarg1, void * jarg2) {
  void * jresult ;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::CompositorChain *result = 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  arg2 = (Ogre::Viewport *)jarg2; 
  result = (Ogre::CompositorChain *)(arg1)->getCompositorChain(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompositorManager_hasCompositorChain(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  bool result;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  arg2 = (Ogre::Viewport *)jarg2; 
  result = (bool)((Ogre::CompositorManager const *)arg1)->hasCompositorChain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorManager_removeCompositorChain(void * jarg1, void * jarg2) {
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  arg2 = (Ogre::Viewport *)jarg2; 
  (arg1)->removeCompositorChain(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorManager_addCompositor__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::String *arg3 = 0 ;
  int arg4 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  arg2 = (Ogre::Viewport *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = (Ogre::CompositorInstance *)(arg1)->addCompositor(arg2,(Ogre::String const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorManager_addCompositor__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::CompositorInstance *result = 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  arg2 = (Ogre::Viewport *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (Ogre::CompositorInstance *)(arg1)->addCompositor(arg2,(Ogre::String const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorManager_removeCompositor(void * jarg1, void * jarg2, char * jarg3) {
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::String *arg3 = 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  arg2 = (Ogre::Viewport *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->removeCompositor(arg2,(Ogre::String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorManager_setCompositorEnabled(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Viewport *arg2 = (Ogre::Viewport *) 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  arg2 = (Ogre::Viewport *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setCompositorEnabled(arg2,(Ogre::String const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorManager__getTexturedRectangle2D(void * jarg1) {
  void * jresult ;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::Renderable *result = 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  result = (Ogre::Renderable *)(arg1)->_getTexturedRectangle2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompositorManager_removeAll(void * jarg1) {
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  (arg1)->removeAll();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorManager_GetAsResourceManager(void * jarg1) {
  void * jresult ;
  Ogre::CompositorManager *arg1 = (Ogre::CompositorManager *) 0 ;
  Ogre::ResourceManager *result = 0 ;
  
  arg1 = (Ogre::CompositorManager *)jarg1; 
  result = (Ogre::ResourceManager *)Ogre_CompositorManager_GetAsResourceManager(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorManager_GetSingleton() {
  void * jresult ;
  Ogre::CompositorManager *result = 0 ;
  
  {
    Ogre::CompositorManager &_result_ref = Ogre_CompositorManager_GetSingleton();
    result = (Ogre::CompositorManager *) &_result_ref;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompositorManager_GetSingletonPtr() {
  void * jresult ;
  Ogre::CompositorManager *result = 0 ;
  
  result = (Ogre::CompositorManager *)Ogre_CompositorManager_GetSingletonPtr();
  jresult = (void *)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

