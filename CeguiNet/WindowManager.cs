/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CeguiDotNet {

using System;
using System.Runtime.InteropServices;

public class WindowManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public WindowManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  static public HandleRef getCPtr(WindowManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~WindowManager() {
    Dispose();
  }

  public virtual void Dispose() {
    if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
      swigCMemOwn = false;
      CeguiBindingsPINVOKE.delete_WindowManager(swigCPtr);
    }
    swigCPtr = new HandleRef(null, IntPtr.Zero);
    GC.SuppressFinalize(this);
  }

	public static WindowManager Instance
	{
		get
		{
			return new WindowManager(CeguiBindingsPINVOKE.WindowManager_getSingleton(), false);
		}
	}

  public static String GeneratedWindowNameBase {
    get {
      IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_GeneratedWindowNameBase_get();
      String ret = (cPtr == IntPtr.Zero) ? null : new String(cPtr, false);
      return ret;
    } 
  }

  public WindowManager() : this(CeguiBindingsPINVOKE.new_WindowManager(), true) {
  }

  public static WindowManager getSingleton() {
    WindowManager ret = new WindowManager(CeguiBindingsPINVOKE.WindowManager_getSingleton(), false);
    return ret;
  }

  public static WindowManager getSingletonPtr() {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_getSingletonPtr();
    WindowManager ret = (cPtr == IntPtr.Zero) ? null : new WindowManager(cPtr, false);
    return ret;
  }

  public Window CreateWindow(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateWindow__SWIG_0(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Window ret = (cPtr == IntPtr.Zero) ? null : new Window(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Window CreateWindow(string type) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateWindow__SWIG_1(swigCPtr, new CeguiDotNet.String(type).HandleRef);
    Window ret = (cPtr == IntPtr.Zero) ? null : new Window(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyWindow(Window window) {
    CeguiBindingsPINVOKE.WindowManager_destroyWindow__SWIG_0(swigCPtr, Window.getCPtr(window));
  }

  public void destroyWindow(string window) {
    CeguiBindingsPINVOKE.WindowManager_destroyWindow__SWIG_1(swigCPtr, new CeguiDotNet.String(window).HandleRef);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Window getWindow(string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_getWindow(swigCPtr, new CeguiDotNet.String(name).HandleRef);
    Window ret = (cPtr == IntPtr.Zero) ? null : new Window(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isWindowPresent(string name) {
    bool ret = CeguiBindingsPINVOKE.WindowManager_isWindowPresent(swigCPtr, new CeguiDotNet.String(name).HandleRef);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyAllWindows() {
    CeguiBindingsPINVOKE.WindowManager_destroyAllWindows(swigCPtr);
  }

  public bool isDeadPoolEmpty() {
    bool ret = CeguiBindingsPINVOKE.WindowManager_isDeadPoolEmpty(swigCPtr);
    return ret;
  }

  public void cleanDeadPool() {
    CeguiBindingsPINVOKE.WindowManager_cleanDeadPool(swigCPtr);
  }

  public void writeWindowLayoutToStream(Window window, SWIGTYPE_p_std__ostream out_stream, bool writeParent) {
    CeguiBindingsPINVOKE.WindowManager_writeWindowLayoutToStream__SWIG_0(swigCPtr, Window.getCPtr(window), SWIGTYPE_p_std__ostream.getCPtr(out_stream), writeParent);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeWindowLayoutToStream(Window window, SWIGTYPE_p_std__ostream out_stream) {
    CeguiBindingsPINVOKE.WindowManager_writeWindowLayoutToStream__SWIG_1(swigCPtr, Window.getCPtr(window), SWIGTYPE_p_std__ostream.getCPtr(out_stream));
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeWindowLayoutToStream(string window, SWIGTYPE_p_std__ostream out_stream, bool writeParent) {
    CeguiBindingsPINVOKE.WindowManager_writeWindowLayoutToStream__SWIG_2(swigCPtr, new CeguiDotNet.String(window).HandleRef, SWIGTYPE_p_std__ostream.getCPtr(out_stream), writeParent);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeWindowLayoutToStream(string window, SWIGTYPE_p_std__ostream out_stream) {
    CeguiBindingsPINVOKE.WindowManager_writeWindowLayoutToStream__SWIG_3(swigCPtr, new CeguiDotNet.String(window).HandleRef, SWIGTYPE_p_std__ostream.getCPtr(out_stream));
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void renameWindow(string window, string new_name) {
    CeguiBindingsPINVOKE.WindowManager_renameWindow__SWIG_0(swigCPtr, new CeguiDotNet.String(window).HandleRef, new CeguiDotNet.String(new_name).HandleRef);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void renameWindow(Window window, string new_name) {
    CeguiBindingsPINVOKE.WindowManager_renameWindow__SWIG_1(swigCPtr, Window.getCPtr(window), new CeguiDotNet.String(new_name).HandleRef);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public PushButton CreatePushButton(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreatePushButton(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    PushButton ret = (cPtr == IntPtr.Zero) ? null : new PushButton(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Titlebar CreateTitlebar(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateTitlebar(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Titlebar ret = (cPtr == IntPtr.Zero) ? null : new Titlebar(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Thumb CreateThumb(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateThumb(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Thumb ret = (cPtr == IntPtr.Zero) ? null : new Thumb(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TabPane CreateTabPane(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateTabPane(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    TabPane ret = (cPtr == IntPtr.Zero) ? null : new TabPane(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TabControl CreateTabControl(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateTabControl(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    TabControl ret = (cPtr == IntPtr.Zero) ? null : new TabControl(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TabButton CreateTabButton(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateTabButton(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    TabButton ret = (cPtr == IntPtr.Zero) ? null : new TabButton(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StaticText CreateStaticText(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateStaticText(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    StaticText ret = (cPtr == IntPtr.Zero) ? null : new StaticText(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StaticImage CreateStaticImage(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateStaticImage(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    StaticImage ret = (cPtr == IntPtr.Zero) ? null : new StaticImage(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Static CreateStatic(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateStatic(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Static ret = (cPtr == IntPtr.Zero) ? null : new Static(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Spinner CreateSpinner(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateSpinner(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Spinner ret = (cPtr == IntPtr.Zero) ? null : new Spinner(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Slider CreateSlider(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateSlider(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Slider ret = (cPtr == IntPtr.Zero) ? null : new Slider(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ScrolledContainer CreateScrolledContainer(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateScrolledContainer(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    ScrolledContainer ret = (cPtr == IntPtr.Zero) ? null : new ScrolledContainer(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Scrollbar CreateScrollbar(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateScrollbar(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Scrollbar ret = (cPtr == IntPtr.Zero) ? null : new Scrollbar(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ScrollablePane CreateScrollablePane(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateScrollablePane(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    ScrollablePane ret = (cPtr == IntPtr.Zero) ? null : new ScrollablePane(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RadioButton CreateRadioButton(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateRadioButton(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    RadioButton ret = (cPtr == IntPtr.Zero) ? null : new RadioButton(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProgressBar CreateProgressBar(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateProgressBar(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    ProgressBar ret = (cPtr == IntPtr.Zero) ? null : new ProgressBar(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MultiLineEditbox CreateMultiLineEditbox(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateMultiLineEditbox(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    MultiLineEditbox ret = (cPtr == IntPtr.Zero) ? null : new MultiLineEditbox(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MultiColumnList CreateMultiColumnList(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateMultiColumnList(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    MultiColumnList ret = (cPtr == IntPtr.Zero) ? null : new MultiColumnList(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FrameWindow CreateFrameWindow(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateFrameWindow(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    FrameWindow ret = (cPtr == IntPtr.Zero) ? null : new FrameWindow(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Editbox CreateEditbox(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateEditbox(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Editbox ret = (cPtr == IntPtr.Zero) ? null : new Editbox(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GUISheet CreateGUISheet(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateGUISheet(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    GUISheet ret = (cPtr == IntPtr.Zero) ? null : new GUISheet(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DragContainer CreateDragContainer(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateDragContainer(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    DragContainer ret = (cPtr == IntPtr.Zero) ? null : new DragContainer(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Combobox CreateCombobox(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateCombobox(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Combobox ret = (cPtr == IntPtr.Zero) ? null : new Combobox(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Checkbox CreateCheckbox(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateCheckbox(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Checkbox ret = (cPtr == IntPtr.Zero) ? null : new Checkbox(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ButtonBase CreateButtonBase(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateButtonBase(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    ButtonBase ret = (cPtr == IntPtr.Zero) ? null : new ButtonBase(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Menubar CreateMenubar(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateMenubar(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    Menubar ret = (cPtr == IntPtr.Zero) ? null : new Menubar(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MenuItem CreateMenuItem(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreateMenuItem(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    MenuItem ret = (cPtr == IntPtr.Zero) ? null : new MenuItem(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PopupMenu CreatePopupMenu(string type, string name) {
    IntPtr cPtr = CeguiBindingsPINVOKE.WindowManager_CreatePopupMenu(swigCPtr, new CeguiDotNet.String(type).HandleRef, new CeguiDotNet.String(name).HandleRef);
    PopupMenu ret = (cPtr == IntPtr.Zero) ? null : new PopupMenu(cPtr, false);
    if (CeguiBindingsPINVOKE.SWIGPendingException.Pending) throw CeguiBindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
